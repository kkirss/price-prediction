/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/": {
    /** Root health check */
    get: operations["checkHealthRoot"];
  };
  "/health": {
    /** Health check */
    get: operations["checkHealth"];
  };
  "/auth/signup": {
    /** Sign up */
    post: operations["signup"];
  };
  "/auth/login": {
    /** Log in */
    post: operations["login"];
  };
  "/auth/logout": {
    /** Log out */
    post: operations["logout"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    MessageResponse: {
      message: string;
    };
    ValidationErrorItem: {
      message: string;
      path: string;
      errorCode?: string;
    };
    APIError: {
      /**
       * @example [
       *   "not found"
       * ]
       */
      error: string;
      errors?: components["schemas"]["ValidationErrorItem"][];
    };
    SignupRequest: {
      /** @example user */
      username: string;
      /** @example password */
      password: string;
    };
    LoginRequest: {
      /** @example user */
      username: string;
      /** @example password */
      password: string;
    };
    User: {
      userId: string;
      username: string;
    };
    Session: {
      /** Format: date-time */
      activePeriodExpiresAt: string;
      /** Format: date-time */
      idlePeriodExpiresAt: string;
      sessionId: string;
      user: components["schemas"]["User"];
    };
  };
  responses: {
    /** @description Message */
    MessageResponse: {
      content: {
        "application/json": components["schemas"]["MessageResponse"];
      };
    };
    /** @description Not found */
    NotFoundResponse: {
      content: {
        "application/json": components["schemas"]["APIError"];
      };
    };
    /** @description Bad request */
    BadRequestResponse: {
      content: {
        "application/json": components["schemas"]["APIError"];
      };
    };
    /** @description Unauthorized */
    UnauthorizedResponse: {
      content: {
        "application/json": components["schemas"]["APIError"];
      };
    };
    /** @description Internal server error */
    InternalServerErrorResponse: {
      content: {
        "application/json": components["schemas"]["APIError"];
      };
    };
    /** @description Health OK */
    HealthOKResponse: {
      content: {
        "text/plain": string;
      };
    };
    /** @description Sign up successful */
    SignupSuccessfulResponse: {
      content: {
        "application/json": components["schemas"]["Session"];
      };
    };
    /** @description Log in successful */
    LoginSuccessfulResponse: {
      content: {
        "application/json": components["schemas"]["Session"];
      };
    };
  };
  parameters: never;
  requestBodies: {
    /** @description Sign up request */
    SignupRequest?: {
      content: {
        "application/json": components["schemas"]["SignupRequest"];
      };
    };
    /** @description Log in request */
    LoginRequest?: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Root health check */
  checkHealthRoot: {
    responses: {
      200: components["responses"]["HealthOKResponse"];
      400: components["responses"]["BadRequestResponse"];
      500: components["responses"]["InternalServerErrorResponse"];
    };
  };
  /** Health check */
  checkHealth: {
    responses: {
      200: components["responses"]["HealthOKResponse"];
      400: components["responses"]["BadRequestResponse"];
      500: components["responses"]["InternalServerErrorResponse"];
    };
  };
  /** Sign up */
  signup: {
    requestBody: components["requestBodies"]["SignupRequest"];
    responses: {
      201: components["responses"]["SignupSuccessfulResponse"];
      400: components["responses"]["BadRequestResponse"];
      500: components["responses"]["InternalServerErrorResponse"];
    };
  };
  /** Log in */
  login: {
    requestBody: components["requestBodies"]["LoginRequest"];
    responses: {
      200: components["responses"]["LoginSuccessfulResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      500: components["responses"]["InternalServerErrorResponse"];
    };
  };
  /** Log out */
  logout: {
    responses: {
      200: components["responses"]["MessageResponse"];
      400: components["responses"]["BadRequestResponse"];
      401: components["responses"]["UnauthorizedResponse"];
      500: components["responses"]["InternalServerErrorResponse"];
    };
  };
}
